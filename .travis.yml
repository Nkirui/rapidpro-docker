sudo: required
services:
  - docker
cache:
  directories:
    - $HOME/postgresql
env:
  global:
    - GREP_TIMEOUT=360
    - REGISTRY_USER=rapidproautomation
    - IMAGE="praekeltfoundation/rapidpro"
    - REPO="praekeltfoundation/rapidpro"
    # NOTE: this is generated with `travis encrypt REGISTRY_PASS="the-password"`
    #       which is decrypted by Travis CI and set as environment variables
    - secure: "PzquUmjgdn4myZjJM7KJ7tBlZaVN9KwA/jALS0Y8dYb80Q/D2UslU+HHR3reoVAmkrEFZV0H4MA2Oaiix9a3bAfu1TR31u2ipOl9d6xTGjF50JxJ8xxFeGwFDFq7MdExVh7MpEHNhn/mLGGlkJrynZ0FRmtp/kOfDezy61g1SXBK9+GyD0JLScv7koffIkOUBXbqDoHqJ5nEBA7wG8AiywecWnCfqP4nyM03keWGqjH8GG9viRX17k33tNTKuKvVtCQDV2f/upWEastZ/aJL4KxMy/fyFaGVUULQ4/XioYkr3NdUWOyN31X//snxHxktMSfD0wb3zhkajc5KpYPucPR4IPE0krH0ps6pXv7o5qzn1WdCJTsTYLGBIzrSj24un2sXV1XzXCRKl9+1n6Tm9Y87zOPZJVCP9AHeJoXBatfi44iDJ2OS1QmKBKSSCIpiDWiyMomQqgFobCB1Pl6NGCYpdF5eFP5zuvbch/619aOrQ14poqoSsz4ysv7guRKPDjRvDU2YCr+Xs/y6kTHYvUh5s4EW9SzWnu2JolX9VcJy+dK5lHwoB1E7TSaFGjpazBF1D1nkF3IjL6x/LA2xgHhSHFKoOBTQWGcOx+DH57T/4UizHXi1zhi1xndQzvYrew4AgfLtIlSfTw9k4JIBJFNjrLgU7Vvu2FxzuwmAly8="
  matrix:
    - VERSION="$TRAVIS_COMMIT"

# Update Docker Engine
before_install:
  - sudo apt-get update
  - sudo apt-get install -qy -o Dpkg::Options::="--force-confold" docker-engine coreutils

before_cache:
  - docker exec --user=postgres postgresql pg_dump rapidpro > $HOME/postgresql/rapidpro.sql

before_script:
  - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then TAG="pr-$TRAVIS_PULL_REQUEST"; else TAG="$TRAVIS_BRANCH"; fi;

script:
  # Setup postgresql and load sql dump if exists
  - docker pull mdillon/postgis:9.6
  - docker run -d --name postgresql -e POSTGRES_DB=rapidpro mdillon/postgis:9.6
  - timeout $GREP_TIMEOUT grep -m 1 'PostgreSQL init process complete; ready for start up.' <(docker logs --follow postgresql 2>&1)
  # Load the cached postgresql dump to speed up migrations
  - if [[ -f $HOME/postgresql/rapidpro.sql ]]; then cat $HOME/postgresql/rapidpro.sql | docker exec -i --user=postgres postgresql psql rapidpro; fi

  # Setup redis
  - docker pull redis:alpine
  - docker run -d --name redis redis:alpine
  - timeout $GREP_TIMEOUT grep -m 1 'The server is now ready to accept connections on port 6379' <(docker logs --follow redis 2>&1)

  # Build RapidPro and run it
  - docker pull rapidpro/rapidpro-base
  - >
    docker build --tag "$IMAGE" \
      --build-arg RAPIDPRO_VERSION=$VERSION \
      --build-arg VCS_REF=$TRAVIS_COMMIT \
      --build-arg BUILD_DATE=$(date -Iseconds) \
      --build-arg RAPIDPRO_REPO=$REPO \
      .
  - >
    docker run --name rapidpro \
      --env-file docker.envfile \
      --link redis \
      --link postgresql \
      --publish 8000:8000 \
      --detach \
      "$IMAGE"

  - timeout $GREP_TIMEOUT grep -m 1 'static files copied' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'Compressing... done' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'Running migrations' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'spawned uWSGI http 1' <(docker logs --follow rapidpro 2>&1)
  - docker exec rapidpro /venv/bin/python /rapidpro/manage.py check

after_script:
  - docker logs rapidpro
  - docker images

before_deploy:
  - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"
deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh "${IMAGE}" "${TAG}"
  on:
    all_branches: true
